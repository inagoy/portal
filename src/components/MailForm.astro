---
import { getStrings, normalizeLang, type Lang } from "../i18n";
interface Props { lang?: Lang }
const pageLang = normalizeLang(Astro.props.lang as string | undefined);
const t = getStrings(pageLang);
---
<!-- // Styling Requires Tailwind CSS -->
<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="form"
  class="needs-validation"
  data-astro-reload
  data-sending={t.form.sending}
  data-error={t.form.error}
  novalidate>
  
   <!-- Add your Web3Forms Access Key -->
  <input type="hidden" name="access_key" value="be4c95cc-555d-48ba-a27c-68d9bd34f384" />
  <!-- Set Web3Forms email subject -->
  <input type="hidden" name="subject" value="NEW MESSAGE AT WEB" />
  <div class="rounded-sm p-5">
    <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
    <div class="grid grid-cols-1 gap-4">
      <div>
        <label for="name" class="sr-only">{t.form.name_placeholder}</label>
        <input
          id="name"
          type="text"
          placeholder={t.form.name_placeholder}
          required
          name="name"
          class="w-full px-4 py-3 rounded-sm bg-white/5 text-white placeholder:text-white/40 border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/60 transition"
        />
        <div class="empty-feedback invalid-feedback text-red-400 text-xs mt-1">
          {t.form.name_required}
        </div>
      </div>
      <div>
        <label for="email_address" class="sr-only">{t.form.email_label}</label>
        <input
          id="email_address"
          type="email"
          placeholder={t.form.email_placeholder}
          name="email"
          required
          class="w-full px-4 py-3 rounded-sm bg-white/5 text-white placeholder:text-white/40 border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/60 transition"
        />
        <div class="empty-feedback text-red-400 text-xs mt-1">
          {t.form.email_required}
        </div>
        <div class="invalid-feedback text-red-400 text-xs mt-1">
          {t.form.email_invalid}
        </div>
      </div>
      <div>
        <label for="message" class="sr-only">{t.form.message_placeholder}</label>
        <textarea
          id="message"
          name="message"
          required
          placeholder={t.form.message_placeholder}
          class="w-full px-4 py-3 rounded-sm bg-white/5 text-white placeholder:text-white/40 border border-white/20 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/60 transition h-36"
        ></textarea>
        <div class="empty-feedback invalid-feedback text-red-400 text-xs mt-1">
          {t.form.message_required}
        </div>
      </div>
    </div>
    <button
      class="flex mx-auto mt-4 px-5 py-3 opacity-100 rounded-sm border border-white/10 hover:opacity-80 transition-opacity hover:line-through focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white/30"
      type="submit"
    >
      {t.form.send_button}
    </button>
    <div id="result" class="mt-3 text-center text-sm opacity-70"></div>
  </div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline>

  // use astro:page-load event if you are using View Transitions

  document.addEventListener("DOMContentLoaded", () => {
  
      const form = document.getElementById("form");
      const result = document.getElementById("result");

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        form.classList.add("was-validated");
        if (!form.checkValidity()) {
          form.querySelectorAll(":invalid")[0].focus();
          return;
        }
        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        var sending = form.getAttribute('data-sending');
        result.innerHTML = sending || "Sending...";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            let json = await response.json();
            if (response.status == 200) {
              result.classList.add("text-green-500");
              result.innerHTML = json.message;
            } else {
              console.log(response);
              result.classList.add("text-red-500");
              result.innerHTML = json.message;
            }
          })
          .catch((error) => {
            console.log(error);
            var err = form.getAttribute('data-error');
            result.innerHTML = err || "Something went wrong!";
          })
          .then(function () {
            form.reset();
            form.classList.remove("was-validated");
            setTimeout(() => {
              result.style.display = "none";
            }, 5000);
          });
      });
    },
    { once: true },
  );
</script>
